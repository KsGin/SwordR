#version 450

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 color;
    vec4 unused;
};

layout (std140, binding = 0) uniform ParameterUBO {
    vec4 param; // x: delta time y: time z: row size w: col size
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) writeonly buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (binding = 3, rgba8) uniform readonly image2D inputImage;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

float random(float n){
    return fract(sin(n) * 43758.5453123);
}

void main() 
{
    if (ubo.param.y < 10) return; // 10ÃëºóÆô¶¯

    uint xIndex = gl_GlobalInvocationID.x;  
    uint yIndex = gl_GlobalInvocationID.y;  
    uint index = xIndex + yIndex * uint(ubo.param.z);
    if(index < uint(ubo.param.z) * uint(ubo.param.w)) {
        Particle particleIn = particlesIn[index];
        float x = xIndex / ubo.param.z * 0.9f + 0.05f;
        float y = yIndex / ubo.param.w * 1.8f + 0.05f;
        float time = ubo.param.y + 1.0f;
                   
        vec4 velocity = particleIn.velocity;
        if (velocity.w < 0.5f) {
            float xDir = (x - 0.5);
            if (xDir < 0.01f && xDir >= 0.0f) xDir = 0.01f;
            if (xDir > -0.01f && xDir <= 0.0f) xDir = -0.01f;
            float yDir = (y - 0.5);
            if (yDir < 0.01f && yDir >= 0.0f) yDir = 0.01f;
            if (yDir > -0.01f && yDir <= 0.0f) yDir = -0.01f;
            velocity.x = random(x / y) * 5 * xDir;
            velocity.y = random(y / x) * 5 * yDir;
            velocity.z = 1;
            velocity.w = 1;
        }

        vec4 position = particleIn.position;
        vec4 color = particleIn.color;
        if (position.w < 0.5f) {
            position = vec4(x, y, 0, 0) + vec4(velocity.xy * 20, 20, 1);

            vec4 imageColor = imageLoad(inputImage, ivec2(x * 2000, y * 2000)).rgba;
            if(imageColor.a > 0.2f){
                color.r = min(random(position.x) + 0.5f , 1.0f);
                color.g = 0.0f;
                color.b = min(random(position.y) + 0.5f, 1.0f);
                color.a = 0.3f;
            } else {
                color.r = 0;
                color.g = 0;
                color.b = 0;
                color.a = 0;
            }
        }

        if (position.z > 0.0f){
            vec2 deltaPos = velocity.xy * ubo.param.x * 2;
            position = position - vec4(deltaPos, ubo.param.x * 2, 0);
        } else {
            if(color.a > 0.1f) {
                color = vec4(cos(time) / 2 + 1, 0, sin(time) / 2 + 1 , 1);
                vec4 imageColor = imageLoad(inputImage, ivec2(position.xy * 2000)).rgba;
                if (imageColor.a > 0.3f) {
                    color.rb += imageColor.rb;
                }
                color.a += ubo.param.x / 10;
                color.a = min(color.a , 0.8f);
            }
        }
        
        particlesOut[index].color = color;
        particlesOut[index].velocity = velocity;
        particlesOut[index].position = position;
    }
}